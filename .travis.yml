language: bash
services: docker

env:
  - VERSION=3.8-rc VARIANT=ubuntu
  - VERSION=3.8-rc VARIANT=ubuntu ARCH=i386
  - VERSION=3.8-rc VARIANT=alpine
  - VERSION=3.8-rc VARIANT=alpine ARCH=i386
  - VERSION=3.8 VARIANT=ubuntu
  - VERSION=3.8 VARIANT=ubuntu ARCH=i386
  - VERSION=3.8 VARIANT=alpine
  - VERSION=3.8 VARIANT=alpine ARCH=i386
  - VERSION=3.7-rc VARIANT=ubuntu
  - VERSION=3.7-rc VARIANT=ubuntu ARCH=i386
  - VERSION=3.7-rc VARIANT=alpine
  - VERSION=3.7-rc VARIANT=alpine ARCH=i386
  - VERSION=3.7 VARIANT=ubuntu
  - VERSION=3.7 VARIANT=ubuntu ARCH=i386
  - VERSION=3.7 VARIANT=alpine
  - VERSION=3.7 VARIANT=alpine ARCH=i386

install:
  - git clone https://github.com/docker-library/official-images.git ~/official-images

before_script:
  - env | sort
  - wget -qO- 'https://github.com/tianon/pgp-happy-eyeballs/raw/master/hack-my-builds.sh' | bash
  - cd "$VERSION/$VARIANT"
  - image="$(awk 'toupper($1) == "FROM" { print $2; exit }' management/Dockerfile)"
  - |
    (
      set -Eeuo pipefail
      set -x
      if [ -n "${ARCH:-}" ]; then
        from="$(awk '$1 == toupper("FROM") { print $2 }' Dockerfile)"
        docker pull "$ARCH/$from"
        docker tag "$ARCH/$from" "$from"
      fi
    )

script:
  - |
    (
      set -Eeuo pipefail
      set -x
      docker build -t "$image" .
      ~/official-images/test/run.sh "$image"
      docker build -t "${image}-management" management
      ~/official-images/test/run.sh "${image}-management"
    )

after_script:
  - docker images

# vim:set et ts=2 sw=2:
